// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: favorite_cs.proto

package route

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavoriteInfo_FavoriteAction_FullMethodName = "/route.FavoriteInfo/favoriteAction"
	FavoriteInfo_FavoriteList_FullMethodName   = "/route.FavoriteInfo/favoriteList"
)

// FavoriteInfoClient is the client API for FavoriteInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteInfoClient interface {
	FavoriteAction(ctx context.Context, in *FavoriteAction, opts ...grpc.CallOption) (*BaseResp, error)
	FavoriteList(ctx context.Context, in *UserFavorite, opts ...grpc.CallOption) (FavoriteInfo_FavoriteListClient, error)
}

type favoriteInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteInfoClient(cc grpc.ClientConnInterface) FavoriteInfoClient {
	return &favoriteInfoClient{cc}
}

func (c *favoriteInfoClient) FavoriteAction(ctx context.Context, in *FavoriteAction, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, FavoriteInfo_FavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteInfoClient) FavoriteList(ctx context.Context, in *UserFavorite, opts ...grpc.CallOption) (FavoriteInfo_FavoriteListClient, error) {
	stream, err := c.cc.NewStream(ctx, &FavoriteInfo_ServiceDesc.Streams[0], FavoriteInfo_FavoriteList_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &favoriteInfoFavoriteListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FavoriteInfo_FavoriteListClient interface {
	Recv() (*VideoResp, error)
	grpc.ClientStream
}

type favoriteInfoFavoriteListClient struct {
	grpc.ClientStream
}

func (x *favoriteInfoFavoriteListClient) Recv() (*VideoResp, error) {
	m := new(VideoResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FavoriteInfoServer is the server API for FavoriteInfo service.
// All implementations must embed UnimplementedFavoriteInfoServer
// for forward compatibility
type FavoriteInfoServer interface {
	FavoriteAction(context.Context, *FavoriteAction) (*BaseResp, error)
	FavoriteList(*UserFavorite, FavoriteInfo_FavoriteListServer) error
	mustEmbedUnimplementedFavoriteInfoServer()
}

// UnimplementedFavoriteInfoServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteInfoServer struct {
}

func (UnimplementedFavoriteInfoServer) FavoriteAction(context.Context, *FavoriteAction) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedFavoriteInfoServer) FavoriteList(*UserFavorite, FavoriteInfo_FavoriteListServer) error {
	return status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedFavoriteInfoServer) mustEmbedUnimplementedFavoriteInfoServer() {}

// UnsafeFavoriteInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteInfoServer will
// result in compilation errors.
type UnsafeFavoriteInfoServer interface {
	mustEmbedUnimplementedFavoriteInfoServer()
}

func RegisterFavoriteInfoServer(s grpc.ServiceRegistrar, srv FavoriteInfoServer) {
	s.RegisterService(&FavoriteInfo_ServiceDesc, srv)
}

func _FavoriteInfo_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteInfoServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteInfo_FavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteInfoServer).FavoriteAction(ctx, req.(*FavoriteAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteInfo_FavoriteList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserFavorite)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FavoriteInfoServer).FavoriteList(m, &favoriteInfoFavoriteListServer{stream})
}

type FavoriteInfo_FavoriteListServer interface {
	Send(*VideoResp) error
	grpc.ServerStream
}

type favoriteInfoFavoriteListServer struct {
	grpc.ServerStream
}

func (x *favoriteInfoFavoriteListServer) Send(m *VideoResp) error {
	return x.ServerStream.SendMsg(m)
}

// FavoriteInfo_ServiceDesc is the grpc.ServiceDesc for FavoriteInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route.FavoriteInfo",
	HandlerType: (*FavoriteInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "favoriteAction",
			Handler:    _FavoriteInfo_FavoriteAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "favoriteList",
			Handler:       _FavoriteInfo_FavoriteList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "favorite_cs.proto",
}
